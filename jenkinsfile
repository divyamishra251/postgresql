pipeline {
    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        PEM_KEY               = credentials('KEY_PEM_PATH')
        AWS_DEFAULT_REGION    = 'ap-south-1'
    }

    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/divyamishra251/postgresql.git', branch: 'main'
            }
        }

        stage('Terraform Init & Plan') {
            steps {
                sh 'terraform -chdir=infra_setup init'
                sh 'terraform -chdir=infra_setup validate'
                sh 'terraform -chdir=infra_setup plan'
            }
        }

        stage('Terraform Apply/Destroy') {
            steps {
                sh '''
                #!/bin/bash
                terraform -chdir=infra_setup ${action} --auto-approve
                '''
            }
        }

        stage('Sleep After Apply') {
            when {
                expression {
                    return params.action == 'apply'
                }
            }
            steps {
                echo "Sleeping for 10 seconds after terraform apply"
                sleep 10
            }
        }

        stage('Approve and Run Ansible Playbook') {
            when {
                expression {
                    return params.action == 'apply'
                }
            }
            steps {
                script {
                    input message: 'Do you approve running the Ansible playbook?', ok: 'Yes', submitter: 'divya'
                    echo "Running Ansible Playbook..."
                    sh '''
                    #!/bin/bash
                    chmod 400 /var/lib/jenkins/workspace/postgresql-infra/apsouth.pem
                    export ANSIBLE_HOST_KEY_CHECKING=False

                    # Remove previous host keys from known_hosts
                    ips=$(ansible-inventory -i ansiblerole/postgres.aws_ec2.yml --list | jq -r '.["_meta"].hostvars | keys[]')
                    for ip in $ips; do
                        ssh-keygen -R $ip || true
                    done

                    # Run playbook using dynamic inventory
                    ansible-playbook -i ansiblerole/postgres.aws_ec2.yml ansiblerole/playbook.yml \
                        --private-key /var/lib/jenkins/workspace/postgresql-infra/apsouth.pem \
                        -u ubuntu
                    '''
                }
            }
        }
    }
}
